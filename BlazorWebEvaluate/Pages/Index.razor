@page "/"
@inject NavigationManager NavigationManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject HttpClient Http

@if(validated){
<h3>ข้อมูลผู้รับการประเมิน</h3>
<div class="row">
    <div class="col-lg-12">
        <div class="form-group">
            <label for="fullname">ผู้รับการประเมิน</label>
            <input @bind="personal.full_name" type="text" class="form-control" id="fullname" placeholder="ป้อนชื่อ-สกุล ผู้รับการประเมิน" required="required" autofocus>
        </div>
        <div class="form-group">
            <label for="level">Level</label>
            <select @bind="personal.level" class="form-control" id="level" required>
                <option> --- โปรดเลือก --- </option>
                @foreach (string level in EvaluateData.AllLevels)
                {
                    <option value="@level"> @level </option>
                }
            </select>
        </div>
        <button @onclick="gotoBack" type="button" class="btn btn-default mt-5">&nbsp;&nbsp;Back&nbsp;&nbsp;</button>
        <button @onclick="gotoNext" type="button" class="btn btn-primary mt-5">&nbsp;&nbsp;Next&nbsp;&nbsp;</button>
    </div>
</div>
}else{
<h3>ข้อมูลผู้ประเมิน</h3>
<div class="row">
    <div class="col-lg-12">
        @if (!string.IsNullOrEmpty(assessor.full_name))
        {
            <div class="form-group">
                <label for="assessor.full_name">ชื่อ-สกุล</label>
                <span id="assessor.full_name" class="form-control">@assessor.full_name</span>
            </div>
            <div class="form-group">
                <label for="assessor.division">สายงาน</label>
                <span id="assessor.division" class="form-control">@assessor.division</span>
            </div><div class="form-group">
                <label for="assessor.level">ระดับ</label>
                <span id="assessor.level" class="form-control">@assessor.level</span>
            </div>
            <button @onclick="OnReset" type="reset" class="btn btn-warning mt-5 mb-5">&nbsp;Reset&nbsp;</button>
            <button @onclick="setAssessor" type="button" class="btn btn-primary mt-5 mb-5">&nbsp;&nbsp;Next&nbsp;&nbsp;</button>
            <button @onclick="gotoReport" type="button" class="btn btn-default mt-5 mb-5">&nbsp;&nbsp;Summary&nbsp;&nbsp;</button>
        }
        else
        {
            <div class="form-group">
                <label for="assessor.full_name">ผู้ประเมิน</label>
                <input @onchange="OnCodeChange" type="text" id="assessor.code" class="form-control" placeholder="ป้อน รหัสพนักงาน" required="required" autofocus>
            </div>
            if (not_found)
            {
                <span class="text-danger">ไม่พบข้อมูล</span>
            }
        }
    </div>
</div>
}

@code {
    private bool validated;
    private Assessor assessor;
    private Personal personal;
    private bool not_found = false;

    protected override async Task OnInitializedAsync()
    {
        assessor = new Assessor();
        assessor.code =  await sessionStorage.GetItemAsync<string>("assessor.code");
        assessor.full_name =  await sessionStorage.GetItemAsync<string>("assessor.full_name");
        assessor.division = await sessionStorage.GetItemAsync<string>("assessor.division");
        assessor.level = await sessionStorage.GetItemAsync<string>("assessor.level");

        personal = new Personal();
        personal.full_name =  await sessionStorage.GetItemAsync<string>("full_name");
        personal.level = await sessionStorage.GetItemAsync<string>("level");

        if(String.IsNullOrEmpty(assessor.code)){
            await sessionStorage.ClearAsync();
            validated = false;
        }

        await base.OnParametersSetAsync();
    }
    private async Task OnReset() {
        assessor = new Assessor();
        await sessionStorage.ClearAsync();
        validated = false;
    }
    private async Task OnCodeChange(ChangeEventArgs args) {
        try
        {
            assessor.code = args.Value.ToString();
            var url = "/ajax/getAssessor.php?code=" + assessor.code;
            assessor = await Http.GetFromJsonAsync<Assessor>(url);
            not_found = false;
            await Task.CompletedTask;
        }
        catch {
            assessor = new Assessor();
            not_found = true;
            await Task.CompletedTask;
        }
    }

    private async Task setAssessor(){
        if(!String.IsNullOrEmpty(assessor.full_name) && !String.IsNullOrEmpty(assessor.code)){
            if(assessor !=null){
                await sessionStorage.SetItemAsync("assessor.code", assessor.code);
                await sessionStorage.SetItemAsync("assessor.full_name", assessor.full_name);
                await sessionStorage.SetItemAsync("assessor.division", assessor.division);
                await sessionStorage.SetItemAsync("assessor.level", assessor.level);
                validated = true;
                StateHasChanged();
            }
        }
    }
    private async Task gotoNext()
    {
        if(!String.IsNullOrEmpty(personal.full_name) && !String.IsNullOrEmpty(personal.level)){
            await sessionStorage.SetItemAsync("full_name", personal.full_name);
            await sessionStorage.SetItemAsync("level", personal.level);
            StateHasChanged();
            NavigationManager.NavigateTo("Leadership");
        }
    }
    private void gotoBack(){
        validated = false;
    }
    private async Task gotoReport(){
        if (assessor != null)
        {
            await sessionStorage.SetItemAsync("assessor.code", assessor.code);
            await sessionStorage.SetItemAsync("assessor.full_name", assessor.full_name);
            await sessionStorage.SetItemAsync("assessor.division", assessor.division);
            await sessionStorage.SetItemAsync("assessor.level", assessor.level);
            validated = true;
            StateHasChanged();
            NavigationManager.NavigateTo("Summary");
        }
    }
}
